11.
#include <stdio.h>
#include <stdlib.h>

void printInventory(int* inventory, int size) {
    for (int i = 0; i < size; i++) {
        printf("Packet %d: %d\n", i + 1, inventory[i]);
    }
}

int main() {
    int initialSize = 10;
    int newSize;
    int* inventory = (int*)malloc(initialSize * sizeof(int));

    
    if (inventory == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    
    for (int i = 0; i < initialSize; i++) {
        inventory[i] = i + 1; 
    }

    printf("Initial inventory:\n");
    printInventory(inventory, initialSize);

    
    printf("Enter new size for inventory: ");
    scanf("%d", &newSize);

    int* newInventory = (int*)realloc(inventory, newSize * sizeof(int));
    if (newInventory == NULL) {
        printf("Memory reallocation failed!\n");
        free(inventory); 
        return 1;
    }

   
    if (newSize > initialSize) {
        for (int i = initialSize; i < newSize; i++) {
            newInventory[i] = 0;
        }
    }

    printf("Updated inventory:\n");
    printInventory(newInventory, newSize);

    
    free(newInventory);

    return 0;
}


12.
#include <stdio.h>

int main() {
   
    int weights[5] = {10, 60, 45, 26, 38};
    
    int totalWeight = 0;
    int numTreasures = sizeof(weights) / sizeof(weights[0]); 

    
    for (int i = 0; i < numTreasures; i++) {
        totalWeight += weights[i];
    }

   
    printf("Total weight of treasures collected: %d\n", totalWeight);

    return 0;
}

13.
#include <stdio.h>


typedef struct {
    int area;
} Square;


typedef struct {
    int length;
    int breadth;
} Rectangle;


typedef struct {
    Square square;
    Rectangle rectangle;
} Shape;


void calculateSquareArea(Square* s, int side) {
    s->area = side * side;
}


int calculateRectangleArea(Rectangle* r) {
    return r->length * r->breadth;
}

int main() {
    
    Shape shape;

   
    int side = 5;
    calculateSquareArea(&shape.square, side);

    
    shape.rectangle.length = 10;
    shape.rectangle.breadth = 20;

    
    printf("Area of the Square: %d\n", shape.square.area);
    printf("Area of the Rectangle: %d\n", calculateRectangleArea(&shape.rectangle));

    return 0;
}
 14.

#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_NAME_LENGTH 50

int main() {
   
    char students[MAX_STUDENTS][MAX_NAME_LENGTH];
    int studentCount = 0; 

   
    char name[MAX_NAME_LENGTH];
    char continueAdding;

    do {
       
        if (studentCount >= MAX_STUDENTS) {
            printf("The list is full. Cannot add more students.\n");
            break;
        }

       
        printf("Enter the student's name: ");
        fgets(name, MAX_NAME_LENGTH, stdin);
        
        name[strcspn(name, "\n")] = '\0';

        

        strcpy(students[studentCount], name);
        studentCount++;

        
        printf("Do you want to add another student? (y/n): ");
        scanf(" %c", &continueAdding);
       
        getchar();

    } while (continueAdding == 'y' || continueAdding == 'Y');

    
    printf("\nList of students who have submitted their assignments:\n");
    for (int i = 0; i < studentCount; i++) {
        printf("%d. %s\n", i + 1, students[i]);
    }

    return 0;
}

15.

#include <stdio.h>


int binarySearch(int arr[], int size, int target) {
    int left = 0;
    int right = size - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        
        if (arr[mid] == target) {
            return mid; 
        }
        
       
        if (arr[mid] < target) {
            left = mid + 1;
        }
        
        else {
            right = mid - 1;
        }
    }
    
    return -1; 
}

int main() {
    
    int bookIDs[] = {101, 203, 305, 407, 509, 612, 718, 824, 933};
    int size = sizeof(bookIDs) / sizeof(bookIDs[0]); 
    int targetID;
    
    printf("Enter the book ID to check availability: ");
    scanf("%d", &targetID);
    
    
    int result = binarySearch(bookIDs, size, targetID);
    
    if (result != -1) {
        printf("Book ID %d is available in the library.\n", targetID);
    } else {
        printf("Book ID %d is not available in the library.\n", targetID);
    }
    
    return 0;
}

17.
#include <stdio.h>
#include <string.h>

#define NUM_STUDENTS 5


typedef struct {
    int register_number;
    char name[50];
    int age;
    float cgpa;
} Student;


void getStudentRecords(Student students[], int count);
void findHighestCGPA(Student students[], int count);

int main() {
    Student students[NUM_STUDENTS];
    
    
    getStudentRecords(students, NUM_STUDENTS);
    
    
    findHighestCGPA(students, NUM_STUDENTS);
    
    return 0;
}


void getStudentRecords(Student students[], int count) {
    for (int i = 0; i < count; i++) {
        printf("Enter details for student %d:\n", i + 1);
        
        printf("Register Number: ");
        scanf("%d

17 b.

Asymptotic notation provides a way to describe the efficiency of an algorithm in terms of time and space complexity as the input size grows.
It allows us to express how the running time or space requirement of an algorithm scales with the input size.

time complexity- O(n)
space complexity-O(1)

18 a .
#include <stdio.h>
#include <stdbool.h>
#include <math.h>


bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    char numStr[20]; 
    int count = 0;
    
   
    printf("Enter a number: ");
    scanf("%s", numStr);
    
    int len = 0;
    while (numStr[len] != '\0') len++; 
    
    
    for (int i = 0; i < len - 1; i++) {
       
        int twoDigitNum = (numStr[i] - '0') * 10 + (numStr[i + 1] - '0');
        
       
        if (twoDigitNum >= 10 && isPrime(twoDigitNum)) {
            count++;
        }
    }
    
   
    printf("Count of two-digit prime numbers: %d\n", count);
    
    return 0;
}

